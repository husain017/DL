# -*- coding: utf-8 -*-
"""J056_DL_Pract_Test_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sNBts-DogbMaqWhOSwFqJ5gXwrl9HLAo
"""

import os
split = ['train','test','validation']
classes = ['agricultural', 'airplane', 'baseballdiamond', 'beach', 'buildings', 'chaparral', 'denseresidential', 'forest', 'freeway', 'golfcourse', 'harbor', 'intersection', 'mediumresidential', 'mobilehomepark', 'overpass', 'parkinglot', 'river', 'runway', 'sparseresidential', 'storagetanks', 'tenniscourt']
for spl in split:
  os.mkdir('/content/'+str(spl))
  for cls in classes:
    os.mkdir('/content/'+str(spl)+'/'+str(cls))

import glob
import cv2
for cls in classes:
  i = 0
  for file in glob.glob("/content/drive/My Drive/UCMerced_LandUse/Images/"+cls+"/*.tif"):
    img  = cv2.imread(file)
    basename = os.path.basename(file) 
    if i < 60:
      path = '/content/train/'+str(cls)+'/'+str(basename)
      cv2.imwrite(path,img)
      i = i+1
    elif i < 80:
      path = '/content/validation/'+str(cls)+'/'+str(basename)
      cv2.imwrite(path,img)
      i = i+1
    else:
      path = '/content/test/'+str(cls)+'/'+str(basename)
      cv2.imwrite(path,img)
      i = i+1

og_test = '/content/test/'
file_names = [] 
categories = []
for cls in classes:
  for file in glob.glob("/content/test/"+cls+"/*.tif"):
    file_names.append(file)
    categories.append(cls)

data_test = pd.DataFrame({'filename':file_names,'label':categories})

data_test.to_csv("og_test.csv",index=False)

from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Dropout, Flatten, Dense
from keras.optimizers import SGD
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    directory=r"/content/train/",
    target_size=(256, 256),
    color_mode="rgb",
    batch_size=30,
    class_mode="categorical",
    shuffle=True,
    seed=42
)

valid_generator = test_datagen.flow_from_directory(
    directory=r"/content/validation/",
    target_size=(256, 256),
    color_mode="rgb",
    batch_size=30,
    class_mode="categorical",
    shuffle=True,
    seed=42
)

test_generator = test_datagen.flow_from_directory(
    directory="/content/test/",
    target_size=(256, 256),
    color_mode="rgb",
    batch_size=1,
    class_mode=None,
    shuffle=False,
    seed=42
)

from keras.utils.np_utils import to_categorical
from keras import models
from keras.datasets import cifar10
from keras.layers import Dense, Dropout
from keras.models import Sequential
from keras.layers import Activation, Flatten, Conv2D
from keras.utils import to_categorical
from keras.datasets import mnist
from keras.utils.vis_utils import model_to_dot
from IPython.display import SVG
from keras.preprocessing.image import ImageDataGenerator

stepsize_train=train_generator.n//train_generator.batch_size
stepsize_valid=valid_generator.n//valid_generator.batch_size

input_shape = (256,256,3)

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(21, activation='softmax'))

model.compile(loss='categorical_crossentropy',
                  optimizer='adamax',
                  metrics=['accuracy'])

model.fit_generator(generator=train_generator,
                    steps_per_epoch=stepsize_train,
                    validation_data=valid_generator,
                    validation_steps=stepsize_valid,
                    epochs=70)

model.evaluate_generator(generator=valid_generator, steps=stepsize_valid)

import pandas as pd

STEP_SIZE_TEST=test_generator.n//test_generator.batch_size
test_generator.reset()
pred=model.predict_generator(test_generator,
steps=STEP_SIZE_TEST,
verbose=1)

predicted_class_indices=np.argmax(pred,axis=1)

labels = (train_generator.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]

file_names=test_generator.file_names
results=pd.DataFrame({"Filename":file_names,
                      "Predictions":predictions})
results.to_csv("results.csv",index=False)

from sklearn.metrics import confusion_matrix
import seaborn as sn
import pandas as pd
import matplotlib.pyplot as plt

cm=confusion_matrix(data_test['label'],results['Predictions'])

sn.set(font_scale=1.4) # for label size
sn.heatmap(cm, annot=True, annot_kws={"size": 7}) # font size
plt.show()

from sklearn.metrics import classification_report
print(classification_report(data_test['label'],results['Predictions']))

import matplotlib.pyplot as plt
# Plot training & validation accuracy values
history = model.history
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()